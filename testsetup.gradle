import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

ext {
    env = 'uat'
    defaultTestPackage = "com.features.*"
}

/**
 * Using the java exec task (more options)
 * Usage:
 * $ gradle clean testExec
 * $ gradle clean testExec -Pgroups=main # run tests from src/main/java folder
 * $ gradle clean testExec -Pgroups=test # run tests from src/test/java folder
 * $ gradle clean testExec -Pgroups=unit # run unit tests
 * $ gradle clean testExec -Pgroups=unit,int # run tests from multiple groups
 * $ gradle clean testExec -PdefaultListeners # run tests without custom listener setup
 * $ gradle clean testExec -Denv=test # run tests with specific test env
 * $ gradle clean testExec -Ptestclasses=com.features.demo.FeatureCTest # run a single specific test class
 * $ gradle clean testExec -Ptestclasses=com.features.demo.FeatureCTest,com.features.demo.FeatureATest # run multiple specific test classes
 * $ gradle clean testExec -Ptestmethods=com.features.demo.FeatureCTest.testC1 # run single test method
 * $ gradle clean testExec -Ptestmethods=com.features.demo.FeatureCTest.testC1,com.features.demo.FeatureATest.testA2 # run multiple test methods
 * $ gradle clean testExec -Psuites=smoke.xml #
 * $ gradle clean testExec -Psuites=regression.xml
 * $ gradle clean testExec -Psuites=regression.xml,smoke.xml
 * $ gradle clean testExec -Psuites=regression.xml -Pgroups=main
 * $ gradle clean testExec -Psuites=regression.xml -Pthreads=3
 * $ gradle clean testExec -Pthreads=3 -Pparallel=classes
 * $ gradle clean testExec -Psuites=regression.xml -Pthreads=2 -Pparallel=tests
 * $ gradle clean testExec -Denv=test -Pthreads=5 -Pgroups=main -Psuite=smoke.xml
 */
task testExec(type: JavaExec, dependsOn: ['clean',
                                          'classes', 'testClasses',
                                          'cleanClasses', 'cleanTestClasses']) {
    classpath += files (
            project.sourceSets.main.allJava.files ,
            project.sourceSets.main.resources.files,
            project.sourceSets.main.compileClasspath,
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.compileClasspath,
            project.sourceSets.test.runtimeClasspath,
    )

    main = 'org.testng.TestNG'
    systemProperties System.getProperties()
    systemProperty 'env', System.properties['env'] ?: "${env}"
    systemProperty "cucumber.options", System.getProperty("cucumber.options")

    def resultDir = "$projectDir/build/test-results"
    def suiteDir = "$projectDir/src/main/resources/test-suites"

    args = ["-d", resultDir,
            "-configfailurepolicy", "continue"]

    if(project.hasProperty("defaultListeners")) {
        args += ["-usedefaultlisteners", "true"]
    } else {
        args += ["-usedefaultlisteners", "false",
                 "-listener", "testng.listeners.TestExecListener"]
    }

    if (project.hasProperty("groups")) {
        args += ["-groups", "$groups"]
    }

    if (project.hasProperty("testclasses")) {
        args += ["-testclass", "$testclasses"]
    }

    if (project.hasProperty("testmethods")) {
        args += ["-methods", "$testmethods"]
    }

    if (project.hasProperty("parallel")) {
        // possible values: tests|classes|methods
        args += ["-parallel", "$parallel"]
    } else {
        args += ["-parallel", "methods"]
    }

    if (project.hasProperty("threads")) {
        args += ["-threadcount", "$threads"]
        args += ["-suitethreadpoolsize", "$threads"]
    } else {
        args += ["-threadcount", "1"]
        args += ["-suitethreadpoolsize", "1"]
    }

    if (project.hasProperty("dataproviderthreads")) {
        args += ["-dataproviderthreadcount", "$dataproviderthreads"]
    } else {
        args += ["-dataproviderthreadcount", "1"]
    }

    // Suites and test classes are mutually exclusive properties as the default xml changes respectively
    if (project.hasProperty("suites")) {
        // For multiple suites separated by comma, split first then add them with their full-path
        def suiteList = "$suites".split(",")
        suiteList.each { suite ->
            args += ["$suiteDir/$suite"]
        }
    } else if (! (project.hasProperty("testmethods") || project.hasProperty("testclasses"))) {
        // Inserting a default xml arg along with methods or testclass arg
        // will lead to an exception in testng suite builder step
        String defaultXml = "$projectDir/build/tmp/default.xml"

        doFirst {
            new File(defaultXml).text = defaultXmlText()
        }
        args += ["$defaultXml"]
    }

    doLast {
        println "TestNG args: " + args
        println "System property env value: ${System.properties.env}"
        println "env default: $env"
    }
}

def defaultXmlText() {
     def packageName = "$defaultTestPackage"
     if (project.hasProperty("testpackages")) {
         packageName = "$testpackages"
     }

    def xmlText =
    """\
    <!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
    |<suite name="default-test-suite" parallel="true">
    |   <test name="default-test">
    |       <packages>
    |           <package name="$packageName" />
    |       </packages>
    |   </test>
    |</suite> 
    """.stripMargin().stripLeading()

    return xmlText
}

tasks.withType(Test) {
    useTestNG() {
        includeGroups project.hasProperty("groups") ? "$groups" : "none"
    }
    testLogging {
        showStandardStreams = true
        events  = [TestLogEvent.STARTED,
                   TestLogEvent.FAILED,
                   TestLogEvent.PASSED,
                   TestLogEvent.SKIPPED,
                   TestLogEvent.STANDARD_OUT,
                   TestLogEvent.STANDARD_ERROR]
        exceptionFormat = TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true

        afterTest { desc, result ->
            println "\nTest executed ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }

    enableAssertions = true
    scanForTestClasses = false

    options {
        systemProperties(System.getProperties())
    }
    systemProperty 'env', System.properties['env'] ?: "${env}"

}

/**
 * Using the default gradle test task (limited options)
 * Usage:
 * $ gradle clean testRun --tests FeatureATest
 */
task testRun(type: Test, dependsOn: ["clean",
                                     "classes","testClasses",
                                     "cleanClasses", "cleanTestClasses"]) {
     classpath += files(
             project.sourceSets.main.compileClasspath,
             project.sourceSets.main.runtimeClasspath,
             project.sourceSets.test.compileClasspath,
             project.sourceSets.test.runtimeClasspath
     )

    scanForTestClasses = true
    forkEvery = 1
    useTestNG()
    testClassesDirs = files(
            "build/classes/java",
            project.sourceSets.main.compileClasspath,
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.compileClasspath,
            project.sourceSets.test.runtimeClasspath
    )

    filter {
        //specific test class
        includeTestsMatching "com.features.demo2.FeatureDTest"

        //specific test method
        includeTestsMatching "com.features.demo.FeatureATest.testA1"

        //specific test class, wildcard for packages
        includeTestsMatching "com.features.demo.Feature*Test"

        //specific test method, use wildcard for packages
        includeTestsMatching "com.features.demo.Feature*Test.test*"

        //all classes in package, recursively
        includeTestsMatching "com.features.demo.*"

        //all integration tests, by naming convention
        includeTestsMatching "*ITest"

        //only ui tests from integration tests, by some naming convention
        includeTestsMatching "*ITest*ui"
    }
}

/**
 * Using the default gradle test task (limited options)
 * Usage:
 * $ gradle testGroups -Pgroups=main
 * $ gradle testGroups -Pgroups=main,unit
 */
task testGroups(type: Test, dependsOn: ['clean', 'classes', 'testClasses']) {
    useTestNG() {
        includeGroups project.hasProperty("groups") ? "$groups" : "none"
    }
    testLogging.events "passed", "skipped", "failed"
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = "full"
}